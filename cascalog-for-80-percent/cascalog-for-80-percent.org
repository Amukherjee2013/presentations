#+OPTIONS: toc:nil num:nil
#+TITLE: Cascalog for the 80% of Data Science
#+AUTHOR: Bruce Durling
#+DATE:
#+REVEAL_THEME: night
#+REVEAL_TRANS: concave
* Nathan Marz

  [[http://bit.ly/cascalog][bit.ly/cascalog]]
  
* Stefan HÃ¼bner

  [[http://bit.ly/hadoop-sanity][bit.ly/hadoop-sanity]]

* Paul Lam

  [[http://bit.ly/cascalog-now][bit.ly/cascalog-now]]

* Paco Nathan

  [[http://bit.ly/copa-cascalog][bit.ly/copa-cascalog]]

* CDEC Open Health Data Platform

  [[http://github.com/CDECatapult][github.com/CDECatapult]]

* 80% of Data Science

  If you don't think you have a data quality problem then you haven't looked at your data.

* Fuller Version

  [[http://github.com/MastodonC/r4f-data][github.com/MastodonC/r4f-data]]

* Our Data

  #+BEGIN_SRC javascript
    ["64626338343139662d613765332d343632372d623339302d3665646130623437663038643a6170706172656e742d706f776572": [],
     "3130383936303a74656d7065726174757265": [["2010-03-18T00:00:00+0000","error:Measurement was not provided by meter",1297773628134], ["2010-03-18T00:05:00+0000","error:Measurement was not provided by meter",1297773628134], ["2010-03-18T00:10:00+0000","error:Measurement was not provided by meter",1297773628134]],
     "64343337613563392d376636372d346437642d393830362d3835393833306337666435363a656c656374726963697479436f6e73756d7074696f6e": [["2012-02-01T00:00:00+0000","{\"v\":203127}",1330550899258000], ["2012-02-01T00:05:00+0000","{\"v\":203127}",1330550899258001], ["2012-02-01T00:10:00+0000","{\"v\":203127}",1330550899258002], ["2012-02-01T00:15:00+0000","{\"v\":203127}",1330550899258003], ["2012-02-01T00:20:00+0000","{\"v\":203127}",1330550899259000], ["2012-02-01T00:25:00+0000","{\"v\":203127}",1330550899259001]]]
  #+END_SRC

* Taps

  #+BEGIN_SRC clojure
    (hfs-textline measurements-in)
    
    (hfs-delimited m7-stage)
    
    (hfs-delimited (str trap-root "/m7"))
    
    (hfs-delimited
     output
     :sinkmode :replace
     :sink-template "%s/%s"
     :templatefields ["?tsb-id" "?safe-sensor-id"]
     :outfields ["?tsb-id" "?entity-id" "?sensor-id"
                 "?tstamp" "?value" "?units" "?type" "?period"])
  #+END_SRC
  
* Filtering

  #+BEGIN_SRC clojure
    (defn data-line? [^String row]
      (and (not= -1 (.indexOf row ":"))
           (.startsWith row "\"")
           (.endsWith row ",")))
    
    (defn non-aggregation? [^String line]
      (let [len (.length line)]
        (and (> len 100)
             (= -1 (.indexOf
                    (.substring line 0 (min len 300))
                    "=>")))))
    
  #+END_SRC

* mapcat with json
  #+BEGIN_SRC clojure
    (defmapcatop verticalize-measurement-rows [^String row]
      (->> (json/parse-string row)
           (remove errored-measurement?)
           (map (fn [[m-tstamp value _]]
                  [m-tstamp (-> (json/parse-string value)
                                (get "v"))]))))
  #+END_SRC

* mapcat with regex
  
  #+BEGIN_SRC clojure
    ;; and only do the json parsing on the individual
    ;; elements after splitting the huge string
    (defmapcatop breakout-readings [^String row]
      (re-seq #"\[[^\]\[]*\]" row))
    
    (defn reading-data [reading-str]
      (let [[tstamp value _] (json/parse-string reading-str)]
        [tstamp (-> (json/parse-string value) (get "v"))]))
  #+END_SRC

* A scrubbed query

  #+BEGIN_SRC clojure
    (defn measurements [input trap]
      (infof "Getting Measurements.")
      (<- [?sensor-id ?tstamp ?value]
          (input ?line)
          (etl/data-line? ?line)
          (non-aggregation? ?line)
          (etl/split-sstable-row ?line :> ?sensor-id-hex ?sensor-data)
          (sensor-has-data? ?sensor-data)
          (etl/unhexify ?sensor-id-hex :> ?sensor-id)
          (breakout-readings ?sensor-data :> ?reading)
          (non-error-reading? ?reading)
          (reading-data ?reading :> ?tstamp ?value)
          (:trap trap)))
  #+END_SRC

* Testing with Midje

  #+BEGIN_SRC clojure
    (ns r4f-data.measurements-test
      (:use midje.sweet
            midje.cascalog
            r4f-data.measurements))
    
    (def m7-data [["\"64626338343139662d613765332d343632372d623339302d3665646130623437663038643a6170706172656e742d706f776572\": [],"]
                  ["\"3130383936303a74656d7065726174757265\": [[\"2010-03-18T00:00:00+0000\",\"error:Measurement was not provided by meter\",1297773628134], [\"2010-03-18T00:05:00+0000\",\"error:Measurement was not provided by meter\",1297773628134], [\"2010-03-18T00:10:00+0000\",\"error:Measurement was not provided by meter\",1297773628134]],"]
                  ["\"64343337613563392d376636372d346437642d393830362d3835393833306337666435363a656c656374726963697479436f6e73756d7074696f6e\": [[\"2012-02-01T00:00:00+0000\",\"{\\\"v\\\":203127}\",1330550899258000], [\"2012-02-01T00:05:00+0000\",\"{\\\"v\\\":203127}\",1330550899258001], [\"2012-02-01T00:10:00+0000\",\"{\\\"v\\\":203127}\",1330550899258002], [\"2012-02-01T00:15:00+0000\",\"{\\\"v\\\":203127}\",1330550899258003], [\"2012-02-01T00:20:00+0000\",\"{\\\"v\\\":203127}\",1330550899259000], [\"2012-02-01T00:25:00+0000\",\"{\\\"v\\\":203127}\",1330550899259001]],"]])
    
    (fact (measurements m7-data (cascalog.api/stdout)) =>
          (produces [["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:00:00+0000" 203127]
                     ["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:05:00+0000" 203127]
                     ["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:10:00+0000" 203127]
                     ["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:15:00+0000" 203127]
                     ["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:20:00+0000" 203127]
                     ["d437a5c9-7f67-4d7d-9806-859830c7fd56:electricityConsumption" "2012-02-01T00:25:00+0000" 203127]]))
  #+END_SRC

* Joining Data

  #+BEGIN_SRC clojure
    (defn retrofit-data [measurements devices projects trap]
      (<- [?tsb-id ?entity-id ?sensor-id ?tstamp ?value ?device-id ?type ?units ?period]
          (measurements :> ?sensor-id ?tstamp ?value)
          (devices :> ?sensor-id ?device-id ?entity-id ?type ?units ?period)
          (projects :> _ _ ?entity-id ?tsb-id-dirty _)
          (string/trim ?tsb-id-dirty :> ?tsb-id)
          (:trap trap)))
  #+END_SRC

* Query planning

  hadoop jar r4f-data.jar s3n://bucket/m7 s3n://bucket/d7 s3n://bucket/projects \
  /user/bld/checkpoint s3n://bucket/output-$(date +%Y%m%d-%H%M) /user/bld/exceptions
  
  #+BEGIN_SRC clojure
    (defn -main [measurements-in devices-in projects-in checkpoint output trap-root & args]
      (?- "gooddata"
          (hfs-delimited
           output
           :sinkmode :replace
           :sink-template "%s/%s" :templatefields ["?tsb-id" "?safe-sensor-id"]
           :outfields ["?tsb-id" "?entity-id" "?sensor-id" "?tstamp" "?value" "?units" "?type" "?period"])
          (good-retrofit-data
           (retrofit-data
            (measurements
             (hfs-textline measurements-in)
             (hfs-delimited (str trap-root "/m7")))
            (devices
             (hfs-textline devices-in)
             (hfs-delimited (str trap-root "/d7")))
            (hfs-delimited projects-in)
            (hfs-delimited (str trap-root "/r8")))
           (hfs-delimited (str trap-root "good")))))
  #+END_SRC

* workflow
  #+BEGIN_SRC clojure
    (defn -main [measurements-in devices-in projects-in checkpoint output trap-root & args]
      (workflow
       [checkpoint]
       m7 ([:tmp-dirs [m7-stage]]
             (with-job-conf
               {"mapred.child.java.opts" "-Xmx3072m"}
               (?- "m7"
                   (hfs-delimited m7-stage)
                   (measurements (hfs-textline measurements-in)
                                 (hfs-delimited (str trap-root "/m7"))))))
       d6 ([:tmp-dirs [d6-stage] :deps :last]
             (?- "d6"
                 (hfs-delimited d6-stage)
                 (devices (hfs-textline devices-in)
                          (hfs-delimited (str trap-root "/d7")))))
       r8 ([:tmp-dirs [r8-stage] :deps [m7 d6]]
             (with-job-conf
               {"mapred.reduce.tasks" 12
                "mapred.reduce.slowstart.completed.maps" 0.60}
               (?- "r8"
                   (hfs-delimited r8-stage)
                   (retrofit-data (hfs-delimited m7-stage)
                                  (hfs-delimited d6-stage)
                                  (hfs-delimited projects-in)
                                  (hfs-delimited (str trap-root "/r8"))))))
       good ([:deps :all]
               (with-job-conf
                 {"mapred.reduce.tasks" 12}
                 (?- "gooddata"
                     (hfs-delimited
                      output
                      :sinkmode :replace
                      :sink-template "%s/%s" :templatefields ["?tsb-id" "?safe-sensor-id"]
                      :outfields ["?tsb-id" "?entity-id" "?sensor-id" "?tstamp" "?value" "?units" "?type" "?period"])
                     (good-retrofit-data (hfs-delimited r8-stage)
                                         (hfs-delimited (str trap-root "good"))))))))
    
  #+END_SRC

* Thank You!
  
  [[http://twitter.com/otfrom][@otfrom]] & [[http://twitter.com/MastodonC][@MastodonC]]
  
  [[http://www.mastodonc.com][mastodonc.com]]

  [[http://github.com/MastodonC/r4f-data][github.com/MastodonC/r4f-data]]

