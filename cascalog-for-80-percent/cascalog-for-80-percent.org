#+OPTIONS: toc:nil num:nil
#+TITLE: Cascalog for the 80% of Data Science
#+AUTHOR: Bruce Durling
#+EMAIL: bruce@mastodonc.com
#+DATE: 11 November 2013
#+REVEAL_THEME: night
#+REVEAL_TRANS: concave
* Standing on the Shoulders of Giants
** Nathan Marz

   [[http://bit.ly/cascalog][bit.ly/cascalog]]
   
** Stefan HÃ¼bner

   [[http://bit.ly/hadoop-sanity][bit.ly/hadoop-sanity]]

** Paul Lam

   [[http://bit.ly/cascalog-now][bit.ly/cascalog-now]]

** Paco Nathan

   [[http://bit.ly/copa-cascalog][bit.ly/copa-cascalog]]

** CDEC Open Health Data Platform

   [[http://github.com/CDECatapult][github.com/CDECatapult]]

* 80% of Data Science

  If you don't think you have a data quality problem then you haven't looked at your data.

* Or...

  In Data Science, 80% of time spent prepare data, 20% of time spent
  complain about need for prepare data. - [[https://twitter.com/BigDataBorat/status/306596352991830016][Big Data Borat]]

  [[./img/borat.jpg]]
  
* Our Open Data

  [[./img/primary-energy-used.png]]

  [[http://www.retrofitanalysis.org/][Retrofit Analysis]]

** For All of These Houses

   [[./img/embed.png]]
   
** Devices

   #+BEGIN_SRC javascript
     {"32626630653634622d666530652d343537382d626362392d306265666465613034336661": [],
      "38373239633161372d373238632d346636342d626636392d393633346431373931306238": [["completenessRatios","[]",1358913726132002], ["description","Ext Power indication",1358913726131003], ["deviceId","8729c1a7-728c-4f64-bf69-9634d17910b8",1358913726131000], ["entityId","4e558c03-b10e-4630-a11a-671c48516621",1358913726131002], ["location","{\"name\":\"36 Geddes Road, Dining/Living Room\"}",1358913726132000], ["metadata","{\"customer_ref\":\"8\"}",1358913726131004], ["parentId","",1358913726131001], ["privacy","private",1358913726131005], ["readings","[{\"type\":\"status\",\"unit\":\"0/1\",\"resolution\":0,\"accuracy\":0.0,\"period\":\"INSTANT\",\"min\":0.0,\"max\":1.0,\"correction\":false,\"correctedUnit\":\"\",\"correctionFactorBreakdown\":\"\",\"completenessRatios\":[]}]",1358913726132001]],
      "64343738393765322d613966352d346430332d626463372d646235356632303033323238": [],
      "63633063336162382d613330362d343434622d393335372d613662393531383764366334": [["deviceId","cc0c3ab8-a306-444b-9357-a6b95187d6c4",1349686153627000], ["location","{}",1294325411560], ["metadata","{\"serial_no\":\"09120702\",\"mpid\":5724}",1342610812222000], ["privacy","private",1294325411560], ["qualifiedMeteringPointId","MPAN.1411960830008",1294325411560], ["readings","[{\"type\":\"electricityConsumption\",\"unit\":\"kWh\",\"resolution\":0.0,\"accuracy\":0.0,\"period\":\"instant\"}]",1294325411560]]}
   #+END_SRC

*** Device Detail

    #+BEGIN_SRC javascript
      {"38373239633161372d373238632d346636342d626636392d393633346431373931306238":
       [["completenessRatios","[]",1358913726132002],
        ["description","Ext Power indication",1358913726131003],
        ["deviceId","8729c1a7-728c-4f64-bf69-9634d17910b8",1358913726131000],
        ["entityId","4e558c03-b10e-4630-a11a-671c48516621",1358913726131002],
        ["location","{\"name\":\"36 Geddes Road, Dining/Living Room\"}",1358913726132000],
        ["metadata","{\"customer_ref\":\"8\"}",1358913726131004],
        ["parentId","",1358913726131001],
        ["privacy","private",1358913726131005],
        ["readings","[{\"type\":\"status\",\"unit\":\"0/1\",\"resolution\":0,\"accuracy\":0.0,\"period\":\"INSTANT\",\"min\":0.0,\"max\":1.0,\"correction\":false,\"correctedUnit\":\"\",\"correctionFactorBreakdown\":\"\",\"completenessRatios\":[]}]",1358913726132001]]}
    #+END_SRC
    
** Measurements

   #+BEGIN_SRC javascript
     ["64626338343139662d613765332d343632372d623339302d3665646130623437663038643a6170706172656e742d706f776572": [],
      "3130383936303a74656d7065726174757265": [["2010-03-18T00:00:00+0000","error:Measurement was not provided by meter",1297773628134], ["2010-03-18T00:05:00+0000","error:Measurement was not provided by meter",1297773628134], ["2010-03-18T00:10:00+0000","error:Measurement was not provided by meter",1297773628134]],
      "64343337613563392d376636372d346437642d393830362d3835393833306337666435363a656c656374726963697479436f6e73756d7074696f6e": [["2012-02-01T00:00:00+0000","{\"v\":203127}",1330550899258000], ["2012-02-01T00:05:00+0000","{\"v\":203127}",1330550899258001], ["2012-02-01T00:10:00+0000","{\"v\":203127}",1330550899258002], ["2012-02-01T00:15:00+0000","{\"v\":203127}",1330550899258003], ["2012-02-01T00:20:00+0000","{\"v\":203127}",1330550899259000], ["2012-02-01T00:25:00+0000","{\"v\":203127}",1330550899259001]]]
   #+END_SRC

*** Measurements Detail

    #+BEGIN_SRC javascript
      {"64343337613563392d376636372d346437642d393830362d3835393833306337666435363a656c656374726963697479436f6e73756d7074696f6e":
       [["2012-02-01T00:00:00+0000","{\"v\":203127}",1330550899258000],
        ["2012-02-01T00:05:00+0000","{\"v\":203127}",1330550899258001],
        ["2012-02-01T00:10:00+0000","{\"v\":203127}",1330550899258002],
        ["2012-02-01T00:15:00+0000","{\"v\":203127}",1330550899258003],
        ["2012-02-01T00:20:00+0000","{\"v\":203127}",1330550899259000],
        ["2012-02-01T00:25:00+0000","{\"v\":203127}",1330550899259001]]}
    #+END_SRC

* Taps

** Input

   #+BEGIN_SRC clojure
     (hfs-textline measurements-in)
     
     (hfs-delimited m7-stage)
   #+END_SRC

** Output

   #+BEGIN_SRC clojure
     (hfs-delimited (str trap-root "/m7"))
     
     (hfs-delimited
      output
          :sinkmode :replace
          :sink-template "%s/%s"
          :templatefields ["?tsb-id" "?safe-sensor-id"]
          :outfields ["?tsb-id" "?entity-id" "?sensor-id"
                      "?tstamp" "?value" "?units" "?type" "?period"])
   #+END_SRC
  
* Filtering

** Simple Filtering

   #+BEGIN_SRC clojure
     (defn data-line? [^String row]
       (and (not= -1 (.indexOf row ":"))
            (.startsWith row "\"")
            (.endsWith row ",")))
     
     (defn non-aggregation? [^String line]
       (let [len (.length line)]
         (and (> len 100)
              (= -1 (.indexOf
                     (.substring line 0 (min len 300))
                     "=>")))))
  #+END_SRC

** Human Err0r

*** Lovely, Lovely Exceptions

    #+BEGIN_SRC clojure
      (defn actually-a-mislabeled-pulse-meter?
        "The following sensor-ids are actually pulse meters."
        [sensor-id]
        (#{"8d694dbd-0659-48d4-bb22-f18c6501d9eb:Electrical"
            "af767a13-09d3-4c44-a613-5b368b8a7be0:Electrical"
            "2568ce4c-a771-4b77-b1bd-1ea48b22a925:electricityConsumption"
            "4033e912-7a87-4746-96e4-b70f59f58cc6:electricityConsumption"
            "76879c63-1da1-4451-8ffb-4073ad33046f:electricityConsumption"
            "7e2a0c52-5714-4630-974d-fef4630dbdaf:electricityConsumption"
            "7ec56bb8-4970-406e-b60b-7f8f6f6bfb03:electricityConsumption"
            "8ecb6061-7318-41a7-8484-86d5121f3f3d:electricityConsumption"
            "b1b53455-b1c6-4b10-ada4-6aed7a7953e0:electricityConsumption"
            "cba40c82-2bd5-46b2-849e-b1a0e544ec61:electricityConsumption"
            "06c7aae5-4191-455d-9418-59aec05c2ac3:gasConsumption"
            "cbab74c2-aa22-4279-b53d-59c892457fd2:waterConsumption"}
         sensor-id))
   #+END_SRC

*** Putting it Together

    #+BEGIN_SRC clojure
      (defn pulse-measurement? [type sensor-id]
        (or (actually-a-mislabeled-pulse-meter? sensor-id)
            (= type "ElecMeterPulse")
            (= type "GasMeterPulse")
            (= type "CHPElecOutputPulse")
            (= type "ElecExportPulse")
            (= type "PVElecOutputPulse")
            (= type "WaterMeterPulse")))
      
    #+END_SRC
    
* Mapping Data with Functions

  #+BEGIN_SRC clojure
    (defn embed-date [d-string]
      (t-format/parse (t-format/formatter "yyyy-MM-dd'T'HH:mm:ssZ") d-string))
    
    (defn just-date [date-time-string]
      (t-format/unparse
       (t-format/formatter "yyyy-MM-dd")
       (embed-date date-time-string)))
    
    (defn mean [sum count]
      (if (zero? count)
        0
        (float (/ sum count))))
  #+END_SRC

** Even with Keys

   #+BEGIN_SRC clojure
     (defn unhexify [^String s]
       (let [^bytes bytes (into-array Byte/TYPE
                                      (map (fn [[x y]]
                                             (unchecked-byte (Integer/parseInt (str x y) 16)))
                                           (partition 2 s)))]
         (String. bytes "UTF-8")))
   #+END_SRC

* defmapcatop

  When your data is horizontal and you want it to be vertical.
  
** with json

   #+BEGIN_SRC clojure
     (defn sensors [{:keys [deviceId entityId readings]}]
       (infof "Getting sensors from device: %s" deviceId)
       (map (fn [{:strs [type unit period]}]
              [(sensor-id deviceId type)
               (str deviceId)
               (str entityId)
               (str type)
               (str unit)
               (str period)])
            (json/parse-string readings)))
     
     (defmapcatop sensor-records [device]
       (infof "Creating sensor records from: %s" device)
       (-> (json/parse-string device)
           cols->map
           sensors))
   #+END_SRC

** with regex

   #+BEGIN_SRC clojure
     (defmapcatop breakout-readings [^String row]
       (infof "Attempting to get readings out of a %s length row." (.length row))
       (re-seq #"\[[^\]\[]*\]" row))
   #+END_SRC
  
* defbufferop

  When you want to deal with a whole sequence of data.
  
** defbufferop Example

    #+BEGIN_SRC clojure
      (defbufferop daily-measurement [tuples]
        (let [[value type sensor-id] (first tuples)
              values (map (fn [[value type _]] value) tuples)]
          (cond
           (cumulative-measurement? type sensor-id)
           [value]
           (pulse-measurement? type sensor-id)
           [(reduce + 0 values)]
           :else
           (let [{:keys [count sum]} ;; fixme to just do last for now
                 (reduce
                   (fn [acc new]
                     (-> (assoc acc :sum (+ (:sum acc) new))
                         (assoc :count (inc (:count acc)))))
                   {:sum 0 :count 0}
                   values)]
             [(mean sum count)]))))
    #+END_SRC

** Prefer These

   https://github.com/nathanmarz/cascalog/wiki/Guide-to-custom-operations
   
   - defbufferiterop
   - degaggregateop
   - defparallelagg



** Or Even Better, These

   - cascalog.ops
     - sum
     - min
     - max
     - count
     - avg
     - div
   - cascalog.math.stats
     - variance
     - sample-variance
     
* A Scrubbed Query

  #+BEGIN_SRC clojure
    (defn devices [devices-in trap]
      (infof "Querying devices from %s" devices-in)
      (<- [?sensor-id ?device-id ?entity-id ?type ?units ?period]
          (devices-in ?line)
          (etl/data-line? ?line)
          (etl/split-sstable-row ?line :> ?rowkey-hex ?device)
          (sensor-records ?device :> ?sensor-id ?device-id ?entity-id ?type ?units ?period)
          (:trap trap)))
  #+END_SRC
  
* Joining Data

  #+BEGIN_SRC clojure
    (defn retrofit-data [measurements devices projects trap]
      (<- [?tsb-id ?entity-id ?sensor-id ?tstamp ?value ?device-id ?type ?units ?period]
          (measurements :> ?sensor-id ?tstamp ?value)
          (devices :> ?sensor-id ?device-id ?entity-id ?type ?units ?period)
          (projects :> _ _ ?entity-id ?tsb-id-dirty _)
          (string/trim ?tsb-id-dirty :> ?tsb-id)
          (:trap trap)))  
  #+END_SRC

* workflow

  #+BEGIN_SRC clojure
    (defn -main [in checkpoint out trap-root & args]
      (workflow
       [checkpoint]
       good ([:tmp-dirs good-stage :deps nil]
               (with-job-conf
                 {"mapred.child.java.opts" "-Xmx3072m"}
                 (?- "gooddata"
                     (hfs-seqfile good-stage)
                     (good-retrofit-data
                      (retrofit-data
                       (measurements (hfs-textline (str in "m7/"))
                                     (hfs-delimited (str trap-root "m7/")))
                       (devices (hfs-textline (str in "/d6"))
                                (hfs-delimited (str trap-root "d7/")))
                       (hfs-delimited (str in "projects/"))
                       (hfs-delimited (str trap-root "r8/")))
                      (hfs-delimited (str trap-root "good/"))))))
       daily ([:deps [good]]
                (with-job-conf
                  {"mapred.output.compress" "false"
                   "mapred.child.java.opts" "-server -Xmx4096m"}
                  (?- "dailydata"
                      (hfs-delimited
                       (str out "daily/")
                       :sinkmode :replace
                       :sink-template "%s/%s" :templatefields ["?tsb-id" "?safe-sensor-id"]
                       :outfields ["?tsb-id" "?sensor-id" "?type" "?units"
                                   "?period" "?date" "?daily-val"])
                      (tsb-daily-measurements (hfs-seqfile good-stage)
                                              (hfs-delimited (str trap-root "daily/"))))))))
  #+END_SRC

* Thank You!

  Bruce Durling
  
  CTO Mastodon C
  
  [[http://twitter.com/otfrom][@otfrom]] & [[http://twitter.com/MastodonC][@MastodonC]]
  
  [[http://www.mastodonc.com][mastodonc.com]]

  [[https://github.com/otfrom/presentations/tree/master/cascalog-for-80-percent][github.com/otfrom/presentations/tree/master/cascalog-for-80-percent]]

